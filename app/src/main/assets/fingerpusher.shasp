import floatinterpolate

uniform vec2 fingerpusher_fingpos1;
uniform vec2 fingerpusher_fingdir1;
uniform float fingerpusher_factor1;

uniform vec2 fingerpusher_fingpos2;
uniform vec2 fingerpusher_fingdir2;
uniform float fingerpusher_factor2;

uniform float fingerpusher_idealdist;
uniform float fingerpusher_ringdist;
uniform float fingerpusher_pow;

vertpipe vec4 vertcolor, vec4 vertpos, order 44
   vec2 diff1 = vertpos.xy - fingerpusher_fingpos1;
   float distance1 = length(diff1);
   float fromideal1 = max(abs(distance1 - fingerpusher_idealdist), 0.05);
   float factor1 = pow(max(1.0 - (fromideal1 / fingerpusher_ringdist), 0.01), fingerpusher_pow);
   // vertcolor.a *= floatinterpolate(fingerpusher_factor1, 1.0f, factor1);
   
   vec2 diff2 = vertpos.xy - fingerpusher_fingpos2;
   float distance2 = length(diff2);
   float fromideal2 = max(abs(distance2 - fingerpusher_idealdist), 0.05);
   float factor2 = pow(max(1.0 - (fromideal2 / fingerpusher_ringdist), 0.01), fingerpusher_pow);
   
   // vertcolor.a *= floatinterpolate(fingerpusher_factor2, 1.0f, factor2);
   
   if(distance1 > 0.05){
      vec2 normalizedmove1 = diff1 / distance1;
      vertpos.x += factor1 * (fingerpusher_fingdir1.x * 0.1 + normalizedmove1.x * -2.0) * fingerpusher_factor1;
      vertpos.y += factor1 * (fingerpusher_fingdir1.y * 0.1 + normalizedmove1.y * -2.0) * fingerpusher_factor1;
   }
   
   if(distance2 > 0.05){
      vec2 normalizedmove2 = diff2 / distance2;
      vertpos.x += factor2 * (fingerpusher_fingdir2.x * 0.1 + normalizedmove2.x * -2.0) * fingerpusher_factor2;
      vertpos.y += factor2 * (fingerpusher_fingdir2.y * 0.1 + normalizedmove2.y * -2.0) * fingerpusher_factor2;
   }
